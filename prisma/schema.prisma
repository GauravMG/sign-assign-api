// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ApprovalStatus {
  pending
  approved
  rejected
}

enum MeasuringUnit {
  ft
  in
}

enum MediaType {
  image
  video
}

enum TicketStatus {
  open
  pending
  closed
}

model Role {
  roleId         Int       @id @default(autoincrement())
  name           String    @db.VarChar(100)
  permissionJSON String?
  status         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdBy      User?     @relation("RoleCreatedBy", fields: [createdById], references: [userId], onDelete: SetNull)
  updatedBy      User?     @relation("RoleUpdatedBy", fields: [updatedById], references: [userId], onDelete: SetNull)
  deletedBy      User?     @relation("RoleDeletedBy", fields: [deletedById], references: [userId], onDelete: SetNull)

  createdById Int?
  updatedById Int?
  deletedById Int?

  users User[]
}

model User {
  userId       Int       @id @default(autoincrement())
  role         Role      @relation(fields: [roleId], references: [roleId], onDelete: Cascade)
  roleId       Int
  firstName    String?   @db.VarChar(100)
  lastName     String?   @db.VarChar(100)
  email        String?   @unique @db.VarChar(100)
  mobile       String?   @db.VarChar(100)
  password     String?   @db.VarChar(100)
  gender       String?   @db.VarChar(100)
  pinCode      String?   @db.VarChar(30)
  address      String?
  city         String?   @db.VarChar(100)
  state        String?   @db.VarChar(100)
  country      String?   @db.VarChar(100)
  profilePhoto String?
  isActive     Boolean   @default(true)
  status       Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?
  createdBy    User?     @relation("UserCreatedBy", fields: [createdById], references: [userId], onDelete: SetNull)
  updatedBy    User?     @relation("UserUpdatedBy", fields: [updatedById], references: [userId], onDelete: SetNull)
  deletedBy    User?     @relation("UserDeletedBy", fields: [deletedById], references: [userId], onDelete: SetNull)

  createdById Int?
  updatedById Int?
  deletedById Int?

  verifications          Verification[]
  loginHistories         LoginHistory[]
  businessUserMappings   BusinessUserMapping[]
  userAddressManagements UserAddressManagement[]

  // Inverse relations
  usersCreatedBy               User[]                @relation("UserCreatedBy")
  usersUpdatedBy               User[]                @relation("UserUpdatedBy")
  usersDeletedBy               User[]                @relation("UserDeletedBy")
  rolesCreatedBy               Role[]                @relation("RoleCreatedBy")
  rolesUpdatedBy               Role[]                @relation("RoleUpdatedBy")
  rolesDeletedBy               Role[]                @relation("RoleDeletedBy")
  verificationCreatedBy        Verification[]        @relation("VerificationCreatedBy")
  verificationUpdatedBy        Verification[]        @relation("VerificationUpdatedBy")
  verificationDeletedBy        Verification[]        @relation("VerificationDeletedBy")
  loginHistoryCreatedBy        LoginHistory[]        @relation("LoginHistoryCreatedBy")
  loginHistoryUpdatedBy        LoginHistory[]        @relation("LoginHistoryUpdatedBy")
  loginHistoryDeletedBy        LoginHistory[]        @relation("LoginHistoryDeletedBy")
  businessCreatedBy            Business[]            @relation("BusinessCreatedBy")
  businessUpdatedBy            Business[]            @relation("BusinessUpdatedBy")
  businessDeletedBy            Business[]            @relation("BusinessDeletedBy")
  businessUserMappingCreatedBy BusinessUserMapping[] @relation("BusinessUserMappingCreatedBy")
  businessUserMappingUpdatedBy BusinessUserMapping[] @relation("BusinessUserMappingUpdatedBy")
  businessUserMappingDeletedBy BusinessUserMapping[] @relation("BusinessUserMappingDeletedBy")
  supportTicketCreatedBy       SupportTicket[]       @relation("SupportTicketCreatedBy")
  supportTicketUpdatedBy       SupportTicket[]       @relation("SupportTicketUpdatedBy")
  supportTicketDeletedBy       SupportTicket[]       @relation("SupportTicketDeletedBy")
  supportTicketMediaCreatedBy  SupportTicketMedia[]  @relation("SupportTicketMediaCreatedBy")
  supportTicketMediaUpdatedBy  SupportTicketMedia[]  @relation("SupportTicketMediaUpdatedBy")
  supportTicketMediaDeletedBy  SupportTicketMedia[]  @relation("SupportTicketMediaDeletedBy")
  productCategoryCreatedBy     ProductCategory[]     @relation("ProductCategoryCreatedBy")
  productCategoryUpdatedBy     ProductCategory[]     @relation("ProductCategoryUpdatedBy")
  productCategoryDeletedBy     ProductCategory[]     @relation("ProductCategoryDeletedBy")
  productSubCategoryCreatedBy  ProductSubCategory[]  @relation("ProductSubCategoryCreatedBy")
  productSubCategoryUpdatedBy  ProductSubCategory[]  @relation("ProductSubCategoryUpdatedBy")
  productSubCategoryDeletedBy  ProductSubCategory[]  @relation("ProductSubCategoryDeletedBy")
  productCreatedBy             Product[]             @relation("ProductCreatedBy")
  productUpdatedBy             Product[]             @relation("ProductUpdatedBy")
  productDeletedBy             Product[]             @relation("ProductDeletedBy")
  productMediaCreatedBy        ProductMedia[]        @relation("ProductMediaCreatedBy")
  productMediaUpdatedBy        ProductMedia[]        @relation("ProductMediaUpdatedBy")
  productMediaDeletedBy        ProductMedia[]        @relation("ProductMediaDeletedBy")

  productAttributeCreatedBy ProductAttribute[] @relation("ProductAttributeCreatedBy")
  productAttributeUpdatedBy ProductAttribute[] @relation("ProductAttributeUpdatedBy")
  productAttributeDeletedBy ProductAttribute[] @relation("ProductAttributeDeletedBy")

  attributeCreatedBy Attribute[] @relation("AttributeCreatedBy")
  attributeUpdatedBy Attribute[] @relation("AttributeUpdatedBy")
  attributeDeletedBy Attribute[] @relation("AttributeDeletedBy")

  variantCreatedBy Variant[] @relation("VariantCreatedBy")
  variantUpdatedBy Variant[] @relation("VariantUpdatedBy")
  variantDeletedBy Variant[] @relation("VariantDeletedBy")

  variantAttributeCreatedBy VariantAttribute[] @relation("VariantAttributeCreatedBy")
  variantAttributeUpdatedBy VariantAttribute[] @relation("VariantAttributeUpdatedBy")
  variantAttributeDeletedBy VariantAttribute[] @relation("VariantAttributeDeletedBy")

  userAddressManagementCreatedBy UserAddressManagement[] @relation("UserAddressManagementCreatedBy")
  userAddressManagementUpdatedBy UserAddressManagement[] @relation("UserAddressManagementUpdatedBy")
  userAddressManagementDeletedBy UserAddressManagement[] @relation("UserAddressManagementDeletedBy")
}

model Verification {
  verificationId   Int       @id @default(autoincrement())
  userId           Int
  user             User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  verificationType String
  hash             String?
  status           Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?
  deletedAt        DateTime?
  createdBy        User?     @relation("VerificationCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy        User?     @relation("VerificationUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy        User?     @relation("VerificationDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model LoginHistory {
  loginHistoryId Int       @id @default(autoincrement())
  userId         Int
  user           User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  deviceType     String    @db.VarChar(50)
  deviceId       String?
  jwtToken       String
  fcmToken       String?
  status         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdBy      User?     @relation("LoginHistoryCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy      User?     @relation("LoginHistoryUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy      User?     @relation("LoginHistoryDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model Business {
  businessId          Int       @id @default(autoincrement())
  name                String?
  type                String?
  yearOfIncorporation String?
  pinCode             String?   @db.VarChar(30)
  address             String?
  city                String?   @db.VarChar(100)
  state               String?   @db.VarChar(100)
  country             String?   @db.VarChar(100)
  webUrl              String?
  status              Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime?
  deletedAt           DateTime?
  createdBy           User?     @relation("BusinessCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy           User?     @relation("BusinessUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy           User?     @relation("BusinessDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  businessUserMappings BusinessUserMapping[]

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model BusinessUserMapping {
  businessUserMappingId Int       @id @default(autoincrement())
  businessId            Int?
  userId                Int?
  business              Business? @relation(fields: [businessId], references: [businessId], onDelete: Cascade)
  user                  User?     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  status                Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?
  deletedAt             DateTime?
  createdBy             User?     @relation("BusinessUserMappingCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy             User?     @relation("BusinessUserMappingUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy             User?     @relation("BusinessUserMappingDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  @@unique([businessId, userId]) // Enforcing unique mapping between business and user
}

model SupportTicket {
  supportTicketId Int          @id @default(autoincrement())
  subject         String
  description     String
  ticketStatus    TicketStatus @default(open)
  status          Boolean      @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime?
  deletedAt       DateTime?
  createdBy       User?        @relation("SupportTicketCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy       User?        @relation("SupportTicketUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy       User?        @relation("SupportTicketDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  supportTicketMedias SupportTicketMedia[]
}

model SupportTicketMedia {
  supportTicketMediaId Int            @id @default(autoincrement())
  supportTicketId      Int
  supportTicket        SupportTicket? @relation(fields: [supportTicketId], references: [supportTicketId], onDelete: Cascade)
  name                 String
  mediaType            String
  mediaUrl             String
  size                 String
  status               Boolean        @default(true)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime?
  deletedAt            DateTime?
  createdBy            User?          @relation("SupportTicketMediaCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy            User?          @relation("SupportTicketMediaUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy            User?          @relation("SupportTicketMediaDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model ProductCategory {
  productCategoryId Int       @id @default(autoincrement())
  name              String
  image             String
  shortDescription  String
  description       String
  status            Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?
  deletedAt         DateTime?
  createdBy         User?     @relation("ProductCategoryCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy         User?     @relation("ProductCategoryUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy         User?     @relation("ProductCategoryDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  productSubCategories ProductSubCategory[]
}

model ProductSubCategory {
  productSubCategoryId Int              @id @default(autoincrement())
  productCategoryId    Int
  productCategory      ProductCategory? @relation(fields: [productCategoryId], references: [productCategoryId], onDelete: Cascade)
  name                 String
  image                String
  shortDescription     String
  description          String
  status               Boolean          @default(true)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime?
  deletedAt            DateTime?
  createdBy            User?            @relation("ProductSubCategoryCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy            User?            @relation("ProductSubCategoryUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy            User?            @relation("ProductSubCategoryDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model Product {
  productId   Int       @id @default(autoincrement())
  name        String
  description String?
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdBy   User?     @relation("ProductCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy   User?     @relation("ProductUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy   User?     @relation("ProductDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  productMedias     ProductMedia[]
  variants          Variant[]
  productAttributes ProductAttribute[]
}

model ProductMedia {
  productMediaId Int       @id @default(autoincrement())
  productId      Int
  product        Product?  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  mediaType      MediaType
  link           String
  status         Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  deletedAt      DateTime?
  createdBy      User?     @relation("ProductMediaCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy      User?     @relation("ProductMediaUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy      User?     @relation("ProductMediaDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
}

model Attribute {
  attributeId Int       @id @default(autoincrement())
  name        String
  dataType    String
  status      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?
  createdBy   User?     @relation("AttributeCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy   User?     @relation("AttributeUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy   User?     @relation("AttributeDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  productAttributes ProductAttribute[]
  variantAttributes VariantAttribute[]
}

model ProductAttribute {
  productAttributeId Int       @id @default(autoincrement())
  attributeId        Int
  productId          Int
  value              String?
  status             Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  createdBy          User?     @relation("ProductAttributeCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy          User?     @relation("ProductAttributeUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy          User?     @relation("ProductAttributeDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?

  products Product? @relation(fields: [productId], references: [productId], onDelete: Cascade)

  attributes Attribute? @relation(fields: [attributeId], references: [attributeId], onDelete: Cascade)
}

model Variant {
  variantId     Int       @id @default(autoincrement())
  productId     Int
  sku           String?
  price         String?
  stockQuantity String?
  status        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  deletedAt     DateTime?
  createdBy     User?     @relation("VariantCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy     User?     @relation("VariantUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy     User?     @relation("VariantDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
  products    Product? @relation(fields: [productId], references: [productId], onDelete: Cascade)

  variantAttributes VariantAttribute[]
}

model VariantAttribute {
  variantAttributeId Int       @id @default(autoincrement())
  attributeId        Int
  variantId          Int
  value              String
  status             Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime?
  deletedAt          DateTime?
  createdBy          User?     @relation("VariantAttributeCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy          User?     @relation("VariantAttributeUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy          User?     @relation("VariantAttributeDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
  attributes  Attribute? @relation(fields: [attributeId], references: [attributeId], onDelete: Cascade)
  variants    Variant?   @relation(fields: [variantId], references: [variantId], onDelete: Cascade)
}

model UserAddressManagement {
  userAddressManagementId  Int       @id @default(autoincrement())
  userId                   Int
  firstName                String
  lastName                 String
  companyName              String?
  phoneNumber              String
  streetAddress            String
  postal                   String
  city                     String
  state                    String
  country                  String
  isDefaultBillingAddress  Boolean   @default(true)
  isDefaultShippingAddress Boolean   @default(true)
  status                   Boolean   @default(true)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime?
  deletedAt                DateTime?
  createdBy                User?     @relation("UserAddressManagementCreatedBy", fields: [createdById], references: [userId], onDelete: Cascade)
  updatedBy                User?     @relation("UserAddressManagementUpdatedBy", fields: [updatedById], references: [userId], onDelete: Cascade)
  deletedBy                User?     @relation("UserAddressManagementDeletedBy", fields: [deletedById], references: [userId], onDelete: Cascade)

  createdById Int?
  updatedById Int?
  deletedById Int?
  users       User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}
